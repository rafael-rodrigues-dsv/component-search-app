"""
Servi√ßo de aplica√ß√£o para processamento de geolocaliza√ß√£o
"""
import logging
from typing import Dict

from ...domain.services.geolocation_domain_service import GeolocationDomainService


class GeolocationApplicationService:
    """Servi√ßo para processamento de geolocaliza√ß√£o das empresas"""

    def __init__(self):
        self.domain_service = GeolocationDomainService()
        self.logger = logging.getLogger(__name__)

    def process_geolocation(self) -> Dict[str, int]:
        """Processa geolocaliza√ß√£o usando tabela de controle"""
        try:
            # Enriquecer endere√ßos com CEP antes da geolocaliza√ß√£o
            from .address_enrichment_application_service import AddressEnrichmentApplicationService
            enrichment_service = AddressEnrichmentApplicationService()
            total_processed, total_enriched = enrichment_service.enrich_addresses_for_geolocation()
            
            if total_enriched > 0:
                self.logger.info(f"[GEO] üéØ {total_enriched} endere√ßos enriquecidos com dados do CEP")
            
            print(f"[GEO] üîç Verificando tarefas pendentes na TB_GEOLOCALIZACAO...")
            
            # Obter tarefas pendentes da tabela de controle
            tarefas = self.domain_service.get_pending_geolocation_tasks()
            print(f"[GEO] üìã {len(tarefas)} tarefas encontradas na TB_GEOLOCALIZACAO")

            if not tarefas:
                print(f"[GEO] ‚ö†Ô∏è  Nenhuma tarefa pendente - verificando se h√° empresas sem geolocaliza√ß√£o...")
                # Verificar se h√° empresas que precisam de tarefas de geolocaliza√ß√£o
                self._create_missing_geolocation_tasks()
                # Tentar novamente
                tarefas = self.domain_service.get_pending_geolocation_tasks()
                print(f"[GEO] üìã Ap√≥s cria√ß√£o: {len(tarefas)} tarefas encontradas")
                
                if not tarefas:
                    self.logger.info("‚úÖ Nenhuma tarefa de geolocaliza√ß√£o pendente")
                    return {'total': 0, 'processadas': 0, 'geocodificadas': 0}

            self.logger.info(f"üåç Iniciando geolocaliza√ß√£o de {len(tarefas)} tarefas")

            processadas = 0
            geocodificadas = 0

            for tarefa in tarefas:
                processadas += 1
                id_geo = tarefa['id_geo']
                empresa_id = tarefa['id_empresa']
                address_model = tarefa['address_model']
                site_url = tarefa['site_url']

                print(f"[GEO] üîÑ Processando {processadas}/{len(tarefas)} | Tarefa ID: {id_geo} | Empresa: {empresa_id}")
                print(f"      üìç Endere√ßo: {address_model.to_full_address()}")

                # Processar geocodifica√ß√£o via Domain Service
                result = self.domain_service.process_single_geolocation(tarefa)
                
                if result['success']:
                    geocodificadas += 1
                    print(f"[GEO] ‚úÖ Sucesso: {result['latitude']}, {result['longitude']} - {result['distancia_km']}km")
                    if result.get('address_corrected'):
                        print(f"      üîß Endere√ßo foi corrigido durante o processo")
                else:
                    print(f"[GEO] ‚ùå Falha: {result['error']}")

            self.logger.info(f"üéØ Geolocaliza√ß√£o conclu√≠da: {geocodificadas}/{processadas} tarefas processadas")

            return {
                'total': len(tarefas),
                'processadas': processadas,
                'geocodificadas': geocodificadas
            }

        except Exception as e:
            self.logger.error(f"Erro no processamento de geolocaliza√ß√£o: {e}")
            return {'total': 0, 'processadas': 0, 'geocodificadas': 0}
    
    def _create_missing_geolocation_tasks(self):
        """Cria tarefas de geolocaliza√ß√£o para empresas que n√£o t√™m"""
        try:
            from ...infrastructure.repositories.access_repository import AccessRepository
            repo = AccessRepository()
            
            # Buscar empresas com endere√ßo mas sem tarefa de geolocaliza√ß√£o
            results = repo.fetch_all("""
                SELECT e.ID_EMPRESA, e.ID_ENDERECO 
                FROM TB_EMPRESAS e 
                WHERE e.ID_ENDERECO IS NOT NULL 
                AND NOT EXISTS (
                    SELECT 1 FROM TB_GEOLOCALIZACAO g 
                    WHERE g.ID_EMPRESA = e.ID_EMPRESA
                )
            """)
            
            print(f"[GEO] üîß Criando tarefas para {len(results)} empresas sem geolocaliza√ß√£o")
            
            for empresa_id, endereco_id in results:
                repo.create_geolocation_task(empresa_id, endereco_id)
                
        except Exception as e:
            print(f"[GEO] ‚ö†Ô∏è  Erro ao criar tarefas: {e}")



    def get_geolocation_stats(self) -> Dict[str, int]:
        """Obt√©m estat√≠sticas de geolocaliza√ß√£o da tabela de controle"""
        return self.domain_service.get_geolocation_statistics()
